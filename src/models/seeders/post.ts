import { v4 as uuidv4 } from "uuid";
import { Post, ListingType, PropertyType, Image, Tag, TagPost, User, UserView } from "@models";


export const seederPost = async () => {
  const users = await User.findAll({ attributes: ["id"] }); // üî• L·∫•y t·∫•t c·∫£ users
  const listingType = await ListingType.findOne();

  if (!users.length || !listingType) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch ng∆∞·ªùi d√πng ho·∫∑c lo·∫°i h√¨nh BƒêS.");
    return;
  }

  let tag = await Tag.findOne({ where: { tagName: "Nh√† ƒë·∫•t b√°n" } });
  if (!tag) {
    tag = await Tag.create({ id: uuidv4(), tagName: "Nh√† ƒë·∫•t b√°n" });
  }

  const districts = [
    "Ba ƒê√¨nh", "Ho√†n Ki·∫øm", "ƒê·ªëng ƒêa", "Hai B√† Tr∆∞ng", "C·∫ßu Gi·∫•y", "Thanh Xu√¢n",
    "T√¢y H·ªì", "Long Bi√™n", "Ho√†ng Mai", "H√† ƒê√¥ng"
  ];

  const streets = [
    "Ph·ªë Hu·∫ø", "Nguy·ªÖn Tr√£i", "Gi·∫£i Ph√≥ng", "L√°ng", "Kim M√£", "T√¢y S∆°n",
    "Tr·∫ßn Duy H∆∞ng", "Nguy·ªÖn Ch√≠ Thanh", "C·∫ßu Gi·∫•y", "H·ªì T√πng M·∫≠u"
  ];

  const postsData = Array.from({ length: 100 }, (_, i) => {
    const randomDistrict = districts[Math.floor(Math.random() * districts.length)];
    const randomStreet = streets[Math.floor(Math.random() * streets.length)];
    const houseNumber = Math.floor(Math.random() * 200) + 1; 
    const randomUser = users[Math.floor(Math.random() * users.length)]; // üî• Ch·ªçn user ng·∫´u nhi√™n

    return {
      id: uuidv4(),
      userId: randomUser.id, // üî• G√°n user ng·∫´u nhi√™n
      title: `CƒÉn h·ªô cao c·∫•p ${randomStreet}, ${randomDistrict}`,
      priceUnit: "VND",
      address: `${houseNumber} ${randomStreet}, ${randomDistrict}, H√† N·ªôi`,
      price: 4000000000 + Math.random() * 4000000000,
      squareMeters: 80 + Math.floor(Math.random() * 50),
      description: "CƒÉn h·ªô sang tr·ªçng, ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t, v·ªã tr√≠ trung t√¢m.",
      floor: Math.floor(Math.random() * 20) + 1,
      bedroom: Math.floor(Math.random() * 3) + 1,
      bathroom: Math.floor(Math.random() * 2) + 1,
      priority: Math.floor(Math.random() * 4),
      isFurniture: Math.random() > 0.5,
      direction: ["B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y"][Math.floor(Math.random() * 4)],
      verified: Math.random() > 0.2,
      status: ["C√≤n tr·ªëng", "ƒêang ƒë√†m ph√°n", "ƒê√£ b√†n giao"][Math.floor(Math.random() * 3)],
      slug: `can-ho-cao-cap-${randomStreet.toLowerCase().replace(/\s+/g, '-')}-${randomDistrict.toLowerCase().replace(/\s+/g, '-')}-${i + 1}`,
      expiredDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),
    };
  });

  await Post.bulkCreate(postsData);
};


export const seedUserViews = async () => {
  const users = await User.findAll();
  const posts = await Post.findAll();

  if (users.length === 0 || posts.length === 0) {
    console.log("C·∫ßn c√≥ √≠t nh·∫•t m·ªôt user v√† m·ªôt post trong database.");
    return;
  }

  const userViewsData = [];
  for (let i = 0; i < 2000; i++) {
    const randomUser = users[Math.floor(Math.random() * users.length)];
    const randomPost = posts[Math.floor(Math.random() * posts.length)];
    const viewedAt = new Date(
      Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)
    );
    userViewsData.push({
      viewId: i + 1,
      userId: randomUser.id,
      postId: randomPost.id,
      viewedAt,
    });
  }
  await UserView.bulkCreate(userViewsData);
};