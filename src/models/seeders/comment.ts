import { v4 as uuidv4 } from "uuid";
import { faker } from "@faker-js/faker";
import { Comment, CommentLike } from "@models";
import User from "@models/user.model";
import Post from "@models/post.model";
import { CommentStatus, LikeStatus } from "@models/enums";

const createCommentsRecursive = async (
  parentId: string | null,
  level: number,
  maxLevel: number,
  commentsData: any[],
  users: any[],
  post: any
) => {
  if (level > maxLevel) return;

  const commentCount = level === 1 ? faker.number.int({ min: 2, max: 5 }) : faker.number.int({ min: 1, max: 3 });

  const commentTemplates = level === 1
    ? [
        () => `B·∫•t ƒë·ªông s·∫£n "${post.title}" n√†y c√≤n kh√¥ng? T√¥i mu·ªën xem chi ti·∫øt.`,
        () => `Gi√° ${post.price.toLocaleString('vi-VN')} VND c√≥ th∆∞∆°ng l∆∞·ª£ng ƒë∆∞·ª£c kh√¥ng?`,
        () => `V·ªã tr√≠ ${post.address} c√≥ g·∫ßn trung t√¢m th∆∞∆°ng m·∫°i kh√¥ng?`,
        () => `T√¥i quan t√¢m ƒë·∫øn "${post.title}". C√≥ th·ªÉ xem nh√† v√†o cu·ªëi tu·∫ßn n√†y kh√¥ng?`,
        () => `B·∫•t ƒë·ªông s·∫£n n√†y c√≥ ph√°p l√Ω r√µ r√†ng kh√¥ng? Vui l√≤ng cung c·∫•p th√™m th√¥ng tin.`,
      ]
    : [
        () => `B·∫°n c√≥ th·ªÉ li√™n h·ªá qua s·ªë ${faker.phone.number()} ƒë·ªÉ trao ƒë·ªïi th√™m.`,
        () => `T√¥i ƒë√£ xem "${post.title}" v√† th·∫•y ph√π h·ª£p. Gi√° c√≥ gi·∫£m th√™m ƒë∆∞·ª£c kh√¥ng?`,
        () => `C·∫£m ∆°n th√¥ng tin! C√≥ h√¨nh ·∫£nh th·ª±c t·∫ø c·ªßa b·∫•t ƒë·ªông s·∫£n n√†y kh√¥ng?`,
        () => `V·ªã tr√≠ n√†y kh√° t·ªët, b·∫°n c√≥ th·ªÉ g·ª≠i th√™m th√¥ng tin v·ªÅ ti·ªán √≠ch xung quanh kh√¥ng?`,
        () => `T√¥i c≈©ng quan t√¢m, b·∫°n c√≥ th·ªÉ cho bi·∫øt th√™m v·ªÅ ph√≠ qu·∫£n l√Ω kh√¥ng?`,
      ];

  for (let i = 0; i < commentCount; i++) {
    const randomUser = faker.helpers.arrayElement(users);
    const commentId = uuidv4();
    const template = faker.helpers.arrayElement(commentTemplates);
    const content = template();
    const createdAt = faker.date.past({ years: 1 });
    const updatedAt = new Date();

    const newComment = {
      id: commentId,
      userId: randomUser.id,
      postId: post.id,
      content,
      status: CommentStatus.ACTIVE,
      parentId,
      level,
      createdAt,
      updatedAt,
    };

    commentsData.push(newComment);

    // Recursively create replies
    await createCommentsRecursive(commentId, level + 1, maxLevel, commentsData, users, post);
  }
};

export const seedComments = async () => {
  try {
    const users = await User.findAll();
    if (!users || users.length === 0) {
      throw new Error('No users found. Please seed users first.');
    }

    const posts = await Post.findAll();
    if (!posts || posts.length === 0) {
      throw new Error('No posts found. Please seed posts first.');
    }

    const commentsData: any[] = [];
    const totalPostsToComment = Math.min(50, posts.length);

    for (let i = 0; i < totalPostsToComment; i++) {
      const randomPost = faker.helpers.arrayElement(posts);
      await createCommentsRecursive(null, 1, 3, commentsData, users, randomPost);
    }

    // Batch create comments
    const batchSize = 100;
    for (let i = 0; i < commentsData.length; i += batchSize) {
      const batch = commentsData.slice(i, i + batchSize);
      await Comment.bulkCreate(batch, { validate: true });
      console.log(`‚úÖ ƒê√£ t·∫°o ${i + batch.length}/${commentsData.length} b√¨nh lu·∫≠n`);
    }

    console.log('üéâ Ho√†n t·∫•t t·∫°o b√¨nh lu·∫≠n!');
  } catch (error) {
    console.error('L·ªói khi ch·∫°y seedComments:', error);
    throw error;
  }
};

export const seedCommentLikes = async () => {
  try {
    const users = await User.findAll();
    if (!users || users.length === 0) {
      throw new Error('No users found. Please seed users first.');
    }

    const comments = await Comment.findAll();
    if (!comments || comments.length === 0) {
      throw new Error('No comments found. Please seed comments first.');
    }

    const commentLikesData = [];
    for (const comment of comments) {
      const numberOfLikes = comment.level === 1
        ? faker.number.int({ min: 2, max: 15 })
        : faker.number.int({ min: 0, max: 5 });

      const selectedUsers = faker.helpers.shuffle(users).slice(0, numberOfLikes);

      for (const user of selectedUsers) {
        commentLikesData.push({
          id: uuidv4(),
          userId: user.id,
          commentId: comment.id,
          status: LikeStatus.LIKE,
          createdAt: faker.date.past({ years: 1 }),
          updatedAt: new Date(),
        });
      }
    }

    const batchSize = 100;
    for (let i = 0; i < commentLikesData.length; i += batchSize) {
      const batch = commentLikesData.slice(i, i + batchSize);
      await CommentLike.bulkCreate(batch, { validate: true });
      console.log(`‚úÖ ƒê√£ t·∫°o ${i + batch.length}/${commentLikesData.length} l∆∞·ª£t th√≠ch b√¨nh lu·∫≠n`);
    }

    console.log('üéâ Ho√†n t·∫•t t·∫°o l∆∞·ª£t th√≠ch b√¨nh lu·∫≠n!');
  } catch (error) {
    console.error('L·ªói khi ch·∫°y seedCommentLikes:', error);
    throw error;
  }
};